#!/bin/bash

d=$( dirname "$0" )
cd "${d}"
PATH=$PATH:"${d}"/Misc

source init.conf
name="${1:-my-replica-set}"

# clean up any previous certs and services
kubectl delete secret ${name}-cert > /dev/null 2>&1

kubectl delete csr ${name}-0.mongodb > /dev/null 2>&1
kubectl delete csr ${name}-1.mongodb > /dev/null 2>&1
kubectl delete csr ${name}-2.mongodb > /dev/null 2>&1

kubectl delete svc ${name}-0 > /dev/null 2>&1
kubectl delete svc ${name}-1 > /dev/null 2>&1
kubectl delete svc ${name}-2 > /dev/null 2>&1

# clean out any old horizon from the config
#sed -i .bak -e '/horizon/d' -e '/connectivity:/d' -e '/replicaSetHorizons:/d' ops-mgr-resource-${name}-secure-auth.yaml

# Create map for OM and the Org/Project
if [[ ${tls} == 1 ]]
then
kubectl delete configmap ${name} > /dev/null 2>&1
kubectl create configmap ${name} \
  --from-literal="baseUrl=${opsMgrUrl}" \
  --from-literal="projectName=${name//-/}" \
  --from-literal="sslMMSCAConfigMap=opsmanager-cert-ca" \
  --from-literal="sslRequireValidMMSServerCertificates=‘true’"
else
kubectl delete configmap ${name} > /dev/null 2>&1
kubectl create configmap ${name} \
  --from-literal="baseUrl=${opsMgrUrl}" \
  --from-literal="projectName=${name//-/}"
fi
   # --from-literal="orgId={$orgId}>" #Optional

# # Create a secret for the member certs for TLS
# kubectl delete secret         ${name}-cert > /dev/null 2>&1
# kubectl create secret generic ${name}-cert \
#   --from-file=${name}-0-pem \
#   --from-file=${name}-1-pem \
#   --from-file=${name}-2-pem
# # Create a map for the cert
# kubectl delete configmap ca-pem > /dev/null 2>&1
# kubectl create configmap ca-pem --from-file=ca-pem

# Create a a secret for db user credentials
kubectl delete secret dbadmin-credentials > /dev/null 2>&1
kubectl create secret generic dbadmin-credentials \
  --from-literal=name="${dbadmin}" \
  --from-literal=password="${dbpassword}"

# Create the User Resource
kubectl apply -f ops-mgr-resource-database-user-conf.yaml

# Create the DB Resource
#kubectl apply -f ops-mgr-resource-${name}.yaml
#kubectl apply -f ops-mgr-resource-${name}-secure.yaml
kubectl apply -f ops-mgr-resource-${name}-secure-auth.yaml

# Monitor the progress
notapproved="Not all certificates have been approved"
certificate="Certificate"
while true
do
    kubectl get mongodb/${name}
    eval status=$( kubectl get mongodb/${name} -o json| jq '.status.phase' )
    eval message=$( kubectl get mongodb/${name} -o json| jq '.status.message')
    printf "%s\n" "$message"
    if [[ "${message:0:39}" == "${notapproved}" ||  "${message:0:11}" == "${certificate}" ]]
    then
        # TLS Cert approval (if using autogenerated certs -- depricated)
        kubectl certificate approve ${name}-0.mongodb 
        kubectl certificate approve ${name}-1.mongodb
        kubectl certificate approve ${name}-2.mongodb
    fi
    #if [[ $status == "Pending" || $status == "Running" ]];
    if [[ "$status" == "Running" ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 15
done

printf "\n"
printf "%s\n" "Wait a minute for the reconfiguration and then connect by running: Misc/kub_connect_to_pod.bash ${name}"
printf "\n"

exit 0
