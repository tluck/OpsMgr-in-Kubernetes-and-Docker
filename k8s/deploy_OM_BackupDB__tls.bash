#!/bin/bash

d=$( dirname "$0" )
cd "${d}"
PATH=$PATH:"${d}"/Misc

source init.conf

kubectl delete secret ops-mgr-backup-cert > /dev/null 2>&1

kubectl delete csr ops-mgr-backup-0.mongodb > /dev/null 2>&1
kubectl delete csr ops-mgr-backup-1.mongodb > /dev/null 2>&1
kubectl delete csr ops-mgr-backup-2.mongodb > /dev/null 2>&1

kubectl delete svc ops-mgr-backup-0 > /dev/null 2>&1
kubectl delete svc ops-mgr-backup-1 > /dev/null 2>&1
kubectl delete svc ops-mgr-backup-2 > /dev/null 2>&1

# update/create configmap with OrgId
#sed -e "s|ORGID|${orgId}|g" -e "s|OPSMGRURL|${opsMgrUrl}|g"  ops-mgr-operator-configmap-ops-mgr-backup.yaml | kubectl apply -f -

# Create a map for OM Org/Project
kubectl delete configmap ops-mgr-backup > /dev/null 2>&1
kubectl create configmap ops-mgr-backup \
  --from-literal="baseUrl=${opsMgrUrl}" \
  --from-literal="projectName=OpsMgrBackup" \
  --from-literal="sslMMSCAConfigMap=opsmanager-cert-ca" \
  --from-literal="sslRequireValidMMSServerCertificates=‘true’"
  # --from-literal="orgId={orgId}" #Optional

# Create a a secret for db user credentials
kubectl delete secret         backup-dbadmin-credentials > /dev/null 2>&1
kubectl create secret generic backup-dbadmin-credentials \
  --from-literal=name="${dbadmin}" \
  --from-literal=password="${dbpassword}"

# Create the User Resource
kubectl apply -f ops-mgr-resource-backup-database-user-conf.yaml

# Create the replica set for the Backing DBs
kubectl apply -f ops-mgr-resource-ops-mgr-backup.yaml 

# Monitor the progress
notapproved="Not all certificates have been approved"
certifcate="Certificate"
while true
do
    kubectl get mongodb/ops-mgr-backup
    eval status=$( kubectl get mongodb/ops-mgr-backup -o json| jq '.status.phase' )
    eval message=$( kubectl get mongodb/ops-mgr-backup -o json| jq '.status.message')
    printf "%s\n" "$message"
    if [[ "${message:0:39}" == "${notapproved}" ||  "${message:0:11}" == "${certificate}" ]]
    then
        # TLS Cert approval (if using autogenerated certs -- depricated)
        kubectl certificate approve ops-mgr-backup-0.mongodb 
        kubectl certificate approve ops-mgr-backup-1.mongodb
        kubectl certificate approve ops-mgr-backup-2.mongodb
    fi
    #if [[ $status == "Pending" || $status == "Running" ]];
    if [[ $status == "Running" ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 15
done

exit
while true
do
    kubectl get mongodb/ops-mgr-backup
    kubectl get mongodb/ops-mgr-backup -o json| jq '.status.phase, .status.message'
    status=$( kubectl wait --for condition=ready pod/ops-mgr-backup-2 )
    if [[ $? == 0 ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 15
done
