#!/bin/bash

d=$( dirname "$0" )
cd "${d}"
PATH=$PATH:"${d}"/Misc

source init.conf

# Create map for OM Org/Project
kubectl delete configmap my-replica-set > /dev/null 2>&1
kubectl create configmap my-replica-set \
  --from-literal="baseUrl=${opsMgrUrl}" \
  --from-literal="projectName=MyReplicaSet"  #Optional
 # --from-literal="orgId={$orgId}>" #Optional

# Create a 3 member replica set

# Create a secret for the member certs for TLS
# kubectl delete secret my-replica-set-cert
# sleep 10
# kubectl get secrets
# kubectl create secret generic my-replica-set-cert \
#   --from-file=my-replica-set-0-pem \
#   --from-file=my-replica-set-1-pem \
#   --from-file=my-replica-set-2-pem
# Create a map for the cert
# kubectl delete configmap ca-pem
# kubectl create configmap ca-pem --from-file=ca-pem

# Create a a secret for db user credentials
kubectl delete secret dbadmin-credentials > /dev/null 2>&1
kubectl create secret generic dbadmin-credentials \
  --from-literal=name="${dbadmin}" \
  --from-literal=password="${dbpassword}"

# clean up any previous certs and services
kubectl delete csr my-replica-set-0.mongodb > /dev/null 2>&1
kubectl delete csr my-replica-set-1.mongodb > /dev/null 2>&1
kubectl delete csr my-replica-set-2.mongodb > /dev/null 2>&1

kubectl delete svc my-replica-set-0 > /dev/null 2>&1
kubectl delete svc my-replica-set-1 > /dev/null 2>&1
kubectl delete svc my-replica-set-2 > /dev/null 2>&1

# Create the User Resource
kubectl apply -f ops-mgr-resource-database-user-conf.yaml

# List maps
kubectl get configmaps -n mongodb

sleep 10
# clean out any old nodeport config
sed -i .bak -e '/nodeport:/d' -e '/connectivity:/d' -e '/replicaSetHorizons:/d' ops-mgr-resource-my-replica-set-secure-auth.yaml
# Create the DB Resource
#kubectl apply -f ops-mgr-resource-my-replica-set.yaml
#kubectl apply -f ops-mgr-resource-my-replica-set-secure.yaml
kubectl apply -f ops-mgr-resource-my-replica-set-secure-auth.yaml

# Monitor the progress
notapproved="Not all certificates have been approved by Kubernetes CA for my-replica-set"
while true
do
    kubectl get mongodb/my-replica-set
    eval status=$( kubectl get mongodb/my-replica-set -o json| jq '.status.phase' )
    eval message=$( kubectl get mongodb/my-replica-set -o json| jq '.status.message')
    printf "%s\n" "$message"
    if [[ "${message}" == "${notapproved}" ]]
    then
        # TLS Cert approval (if using autogenerated certs -- depricated)
        kubectl certificate approve my-replica-set-0.mongodb 
        kubectl certificate approve my-replica-set-1.mongodb
        kubectl certificate approve my-replica-set-2.mongodb
    fi
    #if [[ $status == "Pending" || $status == "Running" ]];
    if [[ $status == "Running" ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 10
done

exit

# Alternate way to monitor - wait for last pod in the set
while true
do
    status=$( kubectl wait --for condition=ready pod/my-replica-set-2 )
    if [[ $? == 0 ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 10
done
