#!/bin/bash

d=$( dirname "$0" )
cd "${d}"
PATH=$PATH:"${d}"/Misc

source init.conf

# expose nodeports - creates nodeport service for each pod of member set
# add the nodeport map for splitHorizon
Misc/exposeNodePort.bash ops-mgr-resource-my-replica-set-secure-auth.yaml

# clean up any previous certs and services
kubectl delete csr my-replica-set-0.mongodb > /dev/null 2>&1
kubectl delete csr my-replica-set-1.mongodb > /dev/null 2>&1
kubectl delete csr my-replica-set-2.mongodb > /dev/null 2>&1

# redeploy with new map
kubectl apply -f ops-mgr-resource-my-replica-set-secure-auth.yaml

# Monitor the progress
notapproved="Not all certificates have been approved by Kubernetes CA for my-replica-set"
certifcate="Certificate"
while true
do
    kubectl get mongodb/my-replica-set
    eval status=$( kubectl get mongodb/my-replica-set -o json| jq '.status.phase' )
    eval message=$( kubectl get mongodb/my-replica-set -o json| jq '.status.message')
    printf "%s\n" "$message"
    if [[ "${message}" == "${notapproved}" ||  "${message:0:11}" == "${certificate}" ]]
    then
        # TLS Cert approval (if using autogenerated certs -- depricated)
        kubectl certificate approve my-replica-set-0.mongodb 
        kubectl certificate approve my-replica-set-1.mongodb
        kubectl certificate approve my-replica-set-2.mongodb
    fi
    #if [[ $status == "Pending" || $status == "Running" ]];
    if [[ $status == "Running" ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 10
done

sleep 10
printf "\n"
printf "%s\n" "Wait a minute for the reconfiguration and then connect by running: Misc/connect_to_my-replica-set.bash"
printf "%s\n" "Connect String: ${myReplicaSetConnect}"
printf "\n"

exit

# Alternate way to monitor - wait for last pod in the set
while true
do
    status=$( kubectl wait --for condition=ready pod/my-replica-set-2 )
    if [[ $? == 0 ]];
    then
        printf "%s\n" "$status"
        break
    fi
    sleep 10
done
